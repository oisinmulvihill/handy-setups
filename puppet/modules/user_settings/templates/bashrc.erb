#!/bin/bash
alias ll='ls --color=auto'
alias rmpyc="find . -iname '*.pyc' -exec rm {} \; -print"
alias rmtil="find . -iname '*~' -exec rm {} \; -print"
alias rmds="find . -iname '\.DS_Store' -exec rm {} \; -print"
alias gst="git status"
alias gci="git commit -am "
alias rmegg='find . -type f -iname '\''*.egg'\'' -exec rm {} \; -print'

alias taillogs='sudo tail -f /var/log/mongodb/mongodb.log /var/log/supervisor/*.log'

export EDITOR=vi

# Set the colour for ls --colour
#
#http://www.bigsoft.co.uk/blog/index.php/2008/04/11/configuring-ls_colors
#eval 'dircolors ~/cfg/DIR_COLORS'
#
LS_COLORS='no=00:fi=00:di=01;36:ln=04;93:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:';
export LS_COLORS

# basic prompt, overridden later on depending on login type:
#
#PS1="\u @ \H [\W]> "
#PS1="\u @ \H  $(vcprompt) [\W]> "
# \[ \e[31m\][\[\e[33m\]
# Fancy colourful prompt:
#source ~/bin/ps1_colours.sh
#PS1='\[\e]0;\w\a\]\n\[\e[1;36m\]\u\[\e[0m\]@\[\e[1;32m\]\h \[\e[31m\][\[\e[33m\]\W\[\e[31m\]]\[\e[0m\]$(vcprompt -f "[%s](\[\e[31m\]%b%m%u\[\e[0m\])")\n\$ '

# project_admin env variable to override default location. This will but the
# location into the host machine mounted folder instead.
#
export PP_ADMIN_PROJECTS_DIR="/home/vagrant/src"

export PYTHON_EGG_CACHE=/home/vagrant/.python-eggs

function superctl() {
    sudo supervisorctl $@
}


function netreset() {
    sudo /etc/init.d/networking restart
}



# Wrap python setup.py . By default it will
# run a python setup.py develop. If there is a BASKET
# environment variable set it will use this as the
# sole source for egg dependancies.
#
# The function will first test for the presence of
# the setup.py file. If its not present it will exit.
#
function sd() {
    if [ "$1" == "" ]; then
        COMMAND="develop"
    else
        COMMAND=$1
    fi

    if [ -e setup.py ]; then
        if [ -z "$BASKET" ]; then
            # No basket defined so don't use it as a source
            python setup.py $COMMAND
        else
            # The BASKET if set will need to specify -i/-f.
            # For example: BASKET="-i http...."
            # For example: BASKET="-f http...."
            #
            if [ $COMMAND == "develop" ]; then
                # only use basket for develop. It does not work
                # with other options.
                python setup.py develop $BASKET
            else
                python setup.py $COMMAND
            fi
        fi
    else
        echo "No setup.py found here: '"`pwd`"'"
    fi
}


function normal_login() {
    # Attempt to set up git, mercurial, ssh. Redo each time (a new shell is
    # started) to make sure that they are always up to date.
    #
    HOST_HOME_MNT=~/host_home

    if [ -x $HOST_HOME_MNT ];
    then
        # The mounted directory is present. Check if the git, mercurial and
        # other things are present and copy them in
        FILES=".ssh/known_hosts .ssh/id_rsa .ssh/id_rsa.pub .ssh/keys .ssh/config .gitconfig .hgrc"
        for f in $FILES; do
            if [ ! -f ~/$f -a -f "$HOST_HOME_MNT/$f" ]; then
                echo "coping '$f'."
                cp -r $HOST_HOME_MNT/$f ~/$f
            fi
        done
    fi

    PS1='\[\e]0;\w\a\]\n\[\e[1;36m\]\u\[\e[0m\]@\[\e[1;32m\]\h \[\e[31m\][\[\e[33m\]\W\[\e[31m\]]\[\e[0m\]$(vcprompt -f "[\[\e[0m\]\[\e[36m\]%s\[\e[31m\]\[\e[0m\]](%b\[\e[31m\]\[\e[36m\]%m%u\[\e[31m\]\[\e[0m\])")\n\$ '
    export=PS1

    # See if virtualenv has been set up usually by p27_deadsnakes_ppa or
    # python_development module:
    #
    export PYTHON=/usr/bin/python2.7
    if [ -x /usr/local/bin/virtualenvwrapper.sh ];
    then
        export WORKON_HOME=$HOME/src/virtualenvs
        export VIRTUALENVWRAPPER_PYTHON=$PYTHON
        export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv-2.7
        source /usr/local/bin/virtualenvwrapper.sh

        echo
        echo "----------------------------------------------------------------"
        echo "The following projects are available to 'workon':"
        echo "----------------------------------------------------------------"
        echo `lsvirtualenv`
        echo
    fi

}

function ssh_login() {
    # normal loging ops:
    echo
    echo "SSH LOGIN FROM: <$SSH_CLIENT>"
    echo
    normal_login
}

# Decided what to finish with based on how the user logged in
#
# elif [ "$SSH_TTY" == "" -a "$SSH_CLIENT" != "" ]; then
#     # SCP LOGIN: ssh_tty<> ssh_client<IP PORT>"
#     echo
#     echo "SCP LOGIN FROM: <$SSH_CLIENT>"
#     echo

if [ "$SSH_TTY" -a "$SSH_CLIENT" != "" ]; then
    # SSH LOGIN: ssh_tty<TTY Device> ssh_client<IP PORT>"
    ssh_login

fi

